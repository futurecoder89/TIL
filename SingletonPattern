싱글톤 패턴의 의의
  주문이 100개여서 객체가 100개의 객체를 생성해야한다면 메모리 낭비가 심하다. 해결방안은 객체가 딱 1개만 생성되고 공유하도록 설계한다.
  객체 인스턴스를 2개이상 생성하지못하도록 막아야한다.
  private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록 막아야 한다.

사용법
  public class SingletonService {
   //1. static 영역에 객체를 딱 1개만 생성해둔다.
   private static final SingletonService instance = new SingletonService();
   //2. public으로 열어서 객체 인스턴스가 필요하면 이 static 메서드를 통해서만 조회하도록 허용한
    다.
   public static SingletonService getInstance() {
   return instance;
   }
   //3. 생성자를 private으로 선언해서 외부에서 new 키워드를 사용한 객체 생성을 못하게 막는다.
   private SingletonService() {
   }
   public void logic() {
   System.out.println("싱글톤 객체 로직 호출");
   }
    }

  1. static 영역에 객체 instance를 미리 하나 생성해서 올려둔다.
  2. 이 객체 인스턴스가 필요하면 오직 getInstance() 메서드를 통해서만 조회할 수 있다. 이 메서드를 호
  출하면 항상 같은 인스턴스를 반환한다.
  3. 딱 1개의 객체 인스턴스만 존재해야 하므로, 생성자를 private으로 막아서 혹시라도 외부에서 new 키워드
  로 객체 인스턴스가 생성되는 것을 막는다.
-------------------------------------------------------------------------------
주의점

싱글톤 패턴이든, 스프링 같은 싱글톤 컨테이너를 사용하든, 객체 인스턴스를 하나만 생성해서 공유하는 싱글톤
방식은 여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에 싱글톤 객체는 상태를 유지(stateful)하
게 설계하면 안된다.
무상태(stateless)로 설계해야 한다

상태를 유지하게 설계하면 나타나는 문제점 
      StatefulService의 price가 공유필드로 설정된 상태
      //ThreadA: A사용자 10000원 주문
        statefulService1.order("userA", 10000);
        //ThreadB: B사용자 20000원 주문
        statefulService2.order("userB", 20000);
        //ThreadA: 사용자A 주문 금액 조회
        int price = statefulService1.getPrice();
        //ThreadA: 사용자A는 10000원을 기대했지만, 기대와 다르게 20000원 출력된다. price가 20000원으로 덮혔기때문이다.
        System.out.println("price = " + price); = price = 20000
