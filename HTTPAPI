HTTP API 설계 예시

    POST - 신규 자원 등록 특징
    • 클라이언트는 등록될 리소스의 URI를 모른다.
    • 회원 등록 /members -> POST
    • POST /members
    • 서버가 새로 등록된 리소스 URI를 생성해준다.
    • HTTP/1.1 201 Created
    Location: /members/100 
    • 컬렉션(Collection) 라고 한다.
    • 서버가 관리하는 리소스 디렉토리
    • 서버가 리소스의 URI를 생성하고 관리
    • 여기서 컬렉션은 /members
    
    
    PUT - 신규 자원 등록 특징
    • 클라이언트가 리소스 URI를 알고 있어야 한다.
    • 파일 등록 /files/{filename} -> PUT
    • PUT /files/star.jpg
    • 클라이언트가 직접 리소스의 URI를 지정한다.
    • 이런 형태를 스토어(Store) 라고한다
    • 클라이언트가 관리하는 리소스 저장소
    • 클라이언트가 리소스의 URI를 알고 관리
    • 여기서 스토어는 /files
    
    *포스트의 신규등록은 클라이언트가 서버에 회원등록을 해달라고 요청하면, 서버가 url를 등록하고 내려주는것이다. 
    그에 비해, PUT 신규자원등록은 파일 등록할때 등록될 파일의 url를 알고있어야 한다.

HTML FORM 사용
• 회원 목록 /members -> GET
• 회원 등록 폼 /members/new -> GET
• 회원 등록 /members/new, /members -> POST
• 회원 조회 /members/{id} -> GET
• 회원 수정 폼 /members/{id}/edit -> GET
• 회원 수정 /members/{id}/edit, /members/{id} -> POST
• 회원 삭제 /members/{id}/delete -> POST

정리
• HTTP API - 컬렉션
• POST 기반 등록
• 서버가 리소스 URI 결정
• HTTP API - 스토어
• PUT 기반 등록
• 클라이언트가 리소스 URI 결정
• HTML FORM 사용
• 순수 HTML + HTML form 사용
• GET, POST만 지원

참고하면 좋은 URI 설계 개념
• 문서(document) 
  • 단일 개념(파일 하나, 객체 인스턴스, 데이터베이스 row)
  • 예) /members/100, /files/star.jpg
• 컬렉션(collection) 
  • 서버가 관리하는 리소스 디렉터리
  • 서버가 리소스의 URI를 생성하고 관리
  • 예) /members
• 스토어(store) 
  • 클라이언트가 관리하는 자원 저장소
  • 클라이언트가 리소스의 URI를 알고 관리
  • 예) /files
• 컨트롤러(controller), 컨트롤 URI 
  • 문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행
  • 동사를 직접 사용
  • 예) /members/{id}/delete

https://restfulapi.net/resource-naming/
