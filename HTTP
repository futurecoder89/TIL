HyperText Transfer Protocol

  무상태프로토콜(stateless)
    -서버가 클라이언트의 상태를 보존하지않음
    -서버 확장성 높음 (수평 확장)
    -클라이언트가 추가 데이터 전송
    -노트북 2개를 신용카드로 구매하겠습니다. 그것을 응답하는 점원이 다른 점원이어도 알아들을수있음

  상태유지프로토콜(Stateful)
    -서버가 클라이언트의 상태를 보존한다 (고객과 점원의 비율을 떠올려보자)
    -노트북 2개 구매하겠습니다.   //  신용카드로 구매하겠습니다. 응답받는 점원이 바뀌면 무엇을 신용카드로 구매하는지 알아들을수없음. ( 요청을 받은 서버가 죽으면 큰일남 ) 

  Stateful, Stateless 차이
  -상태유지: 중간에 다른 점원으로 바뀌면 안된다 ( 중간에 다른 점원으로 바뀔 때 상태 정보를 다른 점원에게 미리 알려줘야 한다. )
  -무상태 : 중간에 다른 점원으로 바뀌어도 된다. 갑자기 고객이 증가해도 점원을 대거 투입할 수 있다. 갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.
  -무상태는 응답 서버를 쉽게 바꿀 수 있다. -> 무한한 서버 증설 가능

  Stateless의 한계
    모든 것을 무상태로 설계 할 수 있는 경우도 있고 없는 경우도 있다.
      • 무상태
      • 예) 로그인이 필요 없는 단순한 서비스 소개 화면
      • 상태 유지
      • 예) 로그인
      • 로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지
      • 일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태 유지
      • 상태 유지는 최소한만 사용
  Connectionless(비연결성)
      •HTTP는 기본이 연결을 유지하지 않는 모델
      • 서버 자원을 매우 효율적으로 사용할 수 있음
  Connectionless의 한계
      • TCP/IP 연결을 새로 맺어야 함 - 3 way handshake 시간 추가
      • 웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라 자바스크립트, css, 추가 이미지 등
      등 수 많은 자원이 함께 다운로드
      • 지금은 HTTP 지속 연결(Persistent Connections)로 문제 해결 - 기존의 방식은 HTML요청하고 종료하고 JS요청하고 종료하고 이미지요청하고 종료해서 3번의 종료가있었는데, 
        Persistent Connections는 연결후 HTML, JS 과 이미지 모두를 요청한 후에 마지막에 종료를 시켜서 1번의 종료만 발생함. -> 시간단축
      • HTTP/2, HTTP/3에서 더 많은 최적화
  HTTP 메시지
    HTTP-message 공식스펙 = start-line (aka request-line / status line
                           *( header-field CRLF )
                           CRLF
                           [ message-body ]
    HTTP 요청 메시지
      GET /search?q=hello&hl=ko HTTP/1.1   = start-line
      Host : www.google.com                = HTTP header
      (                                )   = 공백 (CRLF)
    HTTP 응답 메시지
      HTTP/1.1 200 OK                         = start-line 시작 라인
      Content-Type: text/html;charset=UTF-8
      Content-Length: 3423                    = header 헤더
      (                                    )  = 공백
      <html>
       <body>...</body>
      </html>                                 = message body

      시작라인
        request-line = method SP(공백) request-target SP HTTP-version CRLF(엔터)
        • HTTP 메서드 (GET: 조회)
        • 요청 대상 (/search?q=hello&hl=ko)
        • HTTP Version
          요청 메시지 - HTTP 메서드
            • 종류: GET, POST, PUT, DELETE...
            • 서버가 수행해야 할 동작 지정
            • GET: 리소스 조회
            • POST: 요청 내역 처리
          요청 메시지 - 요청 대상
            • absolute-path[?query] (절대경로[?쿼리])
            • 절대경로= "/" 로 시작하는 경로
            • 참고: *, http://...?x=y 와 같이 다른 유형의 경로지정 방법도 있다.
          요청 메시지 - HTTP 버전
            • HTTP Version 1.1 / 2 / 3
  
          응답 메시지
              • status-line = HTTP-version SP status-code SP reason-phrase CRLF
              • HTTP 버전
              • HTTP 상태 코드: 요청 성공, 실패를 나타냄
              • 200: 성공
              • 400: 클라이언트 요청 오류
              • 500: 서버 내부 오류
              • 이유 문구: 사람이 이해할 수 있는 짧은 상태 코드 설명 글
      HTTP 헤더
        • header-field = field-name ":" OWS field-value OWS (OWS:띄어쓰기 허용)
        • field-name은 대소문자 구문 없음
        용도
          • HTTP 전송에 필요한 모든 부가정보
          • 예) 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트(브라우저) 정보, 
          서버 애플리케이션 정보, 캐시 관리 정보...
          • 표준 헤더가 너무 많음
          • https://en.wikipedia.org/wiki/List_of_HTTP_header_fields
          • 필요시 임의의 헤더 추가 가능
          • helloworld: hihi
      HTTP 메시지 바디
        • 실제 전송할 데이터
        • HTML 문서, 이미지, 영상, JSON 등등 byte로 표현할 수 있는 모든 데이터 전송 가능
